doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(rel="stylesheet", href="/stylesheets/style.css")
    title Post Details
    script.
      function confirmDelete(commentId) {
        if (confirm("진짜로 이 댓글을 삭제하시겠습니까?")) {
          fetch('/comment/delete/' + commentId, {
            method: 'DELETE'
          })
          .then(response => {
            if (response.ok) {
              location.reload(); // 댓글이 성공적으로 삭제된 경우
            } else {
              alert('댓글 삭제에 실패했습니다.'); // 댓글 삭제에 실패한 경우
            }
          })
          .catch(error => {
            console.error('댓글 삭제 중 오류 발생:', error);
            alert('댓글 삭제 중 오류가 발생했습니다.');
          });
        }
      }

      function editComment(commentId) {
        // 해당 댓글의 내용을 수정할 수 있는 입력 필드 보이기
        const commentContent = document.getElementById(`commentContent${commentId}`);
        const editForm = document.getElementById(`editForm${commentId}`);
        const editContent = document.getElementById(`editContent${commentId}`);

        // 현재 댓글 내용을 입력 필드에 설정
        editContent.value = commentContent.textContent;

        // 댓글 내용 보이는 영역 숨기고 수정 폼 보이기
        commentContent.style.display = 'none';
        editForm.style.display = 'block';
      }

      function saveComment(commentId) {
        const editedContent = document.getElementById(`editContent${commentId}`).value;
        const updatedComment = {
          content: editedContent
        };

        // AJAX 요청
        fetch(`/comment/update/${commentId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(updatedComment)
        })
        .then(response => {
          if (response.ok) {
            window.location.reload(); // 댓글이 성공적으로 수정된 경우
          } else {
            alert('댓글 수정에 실패했습니다.'); // 댓글 수정에 실패한 경우
          }
        })
        .catch(error => {
          console.error(error);
        });
      }

      function cancelEdit(commentId) {
        const editForm = document.getElementById(`editForm${commentId}`);
        const commentContent = document.getElementById(`commentContent${commentId}`);
        editForm.style.display = 'none';
        commentContent.style.display = 'block';
      }

      function confirmPostDelete(postId) {
        if (confirm("진짜로 이 게시글을 삭제하시겠습니까?")) {
          fetch('/post/delete/' + postId, {
            method: 'DELETE'
          })
          .then(response => {
            if (response.ok) {
              location.href = '/'; // 게시글이 성공적으로 삭제된 경우
            } else {
              alert('게시글 삭제에 실패했습니다.'); // 게시글 삭제에 실패한 경우
            }
          })
          .catch(error => {
            console.error('게시글 삭제 중 오류 발생:', error);
            alert('게시글 삭제 중 오류가 발생했습니다.');
          });
        }
      }

  body
    h1 Post Details
    if post
      div
        p Category: #{category.name}
        p Title: #{post.title}
        p Author: #{profile.nickname}
        p Created At: #{post.created_at}
        p Content: #{post.content}
        if post.tags.length > 0
          p Tags: #{post.tags}
        else
          p No tag available

        if isOwner
          form(method='POST', action=`/edit_post`)
            input(type='hidden', name='postId', value=post.id)
            button(type='submit') Edit Post
          button(type='button', onclick=`confirmPostDelete('${post.id}')`) Delete Post

      if comments.length > 0
        h2 Comments
        ul
          each comment in comments
            li
              if !comment.is_secret || (comment.is_secret && isOwner) || (visitor && (comment.user_id == visitor.id))
                p Author: #{comment.author}, Created At: #{comment.created_at}
                p Content:
                  span(id=`commentContent${comment.id}`) #{comment.content}
                  if visitor && comment.user_id === visitor.id
                    a(href=`#`, onclick=`editComment('${comment.id}')`) Edit
                    a(href=`#`, onclick=`confirmDelete('${comment.id}')`) Delete
              else
                p This Comment is Secret

              // Edit Comment form
              form(id=`editForm${comment.id}`, style='display: none;')
                input(type='hidden', name='commentId', value=comment.id)
                textarea(id=`editContent${comment.id}`, name='content') #{comment.content}
                button(type='button', onclick=`saveComment('${comment.id}')`) Save
                button(type='button', onclick=`cancelEdit('${comment.id}')`) Cancel
      else
        p No comments available

      if visitor
        form(action='/add_comment', method='POST')
          input(type='hidden', name='postId', value=post.id)
          input(type='hidden', name='categoryId', value=category.id)
          label(for='content') Add Comment:
          textarea(id='content', name='content')
          label(for='isSecret') is Secret?:
          button(type='button', id='toggleButton', class='toggle-button') Public
          input(type='hidden', id='isSecret', name='isSecret', value='0')
          input(type='submit', value='Add Comment')
      else
        p Login to add comments
    else
      p Post not found

  script.
    const toggleButton = document.getElementById('toggleButton');
    const isSecretInput = document.getElementById('isSecret');

    toggleButton.addEventListener('click', function() {
      if (toggleButton.classList.contains('active')) {
        toggleButton.textContent = 'Public';
        toggleButton.classList.remove('active');
        isSecretInput.value = '0'; // Public
      } else {
        toggleButton.textContent = 'Secret';
        toggleButton.classList.add('active');
        isSecretInput.value = '1'; // Secret
      }
    });
